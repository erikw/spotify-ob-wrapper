#!/usr/bin/env python2

# spotify-ob-wrapper v0.2
# by Bas Dalenoord, mijn.me.uk
# Copyright (c) 2012 All rights reserved 
#
# I used some parts from other projects and combined them together. My
# word of thanks goes to the following people:
#  - Stuart Colville
#  - Abhijeet Rastogi
#  - John Reese
#
# This project is licensed under the BSD license. See the 
# LICENSE file for details.

import os
import dbus
from gi.repository import GObject
from gi.repository import Notify	
import httplib2
from urllib import quote
from cgi import escape
from hashlib import md5
from dbus.mainloop.glib import DBusGMainLoop
from dbus.exceptions import DBusException
import subprocess
import time

SPOTIFY_BIN = "/usr/bin/spotify"
HTTP_CACHE_DIR = os.path.expanduser("~/.cache/spotify/http/")
IMAGE_CACHE_DIR = os.path.expanduser("~/.cache/spotify/art/")

MISSING = os.path.realpath(os.path.join(os.path.dirname(__file__), "missing.png"))

if not os.path.isdir(HTTP_CACHE_DIR):
    os.makedirs(HTTP_CACHE_DIR)
if not os.path.isdir(IMAGE_CACHE_DIR):
    os.makedirs(IMAGE_CACHE_DIR)

class SpotifyNotifier(object):
	
    def __init__(self):
        pid = os.fork()

        if pid == 0:
            time.sleep(1)
            print "Launching Spotify..."
            self.spotify = None
            args = [SPOTIFY_BIN]
            os.execv(SPOTIFY_BIN, args)

        else:
			"""initialise."""
			bus_loop = DBusGMainLoop(set_as_default=True)
			self.bus = dbus.SessionBus(mainloop=bus_loop)
			loop = GObject.MainLoop()
			self.http = httplib2.Http(HTTP_CACHE_DIR)
			self.notify_id = None
			try:
				self.props_changed_listener()
			except DBusException, e:
				if not ("org.mpris.MediaPlayer2.spotify "
						"was not provided") in e.get_dbus_message():
					raise
			self.session_bus = self.bus.get_object("org.freedesktop.DBus",
									 "/org/freedesktop/DBus")
			self.session_bus.connect_to_signal("NameOwnerChanged",
											self.handle_name_owner_changed,
											arg0="org.mpris.MediaPlayer2.spotify")

			loop.run()

    def props_changed_listener(self):
        """Hook up callback to PropertiesChanged event."""
        self.spotify = self.bus.get_object("org.mpris.MediaPlayer2.spotify",
                                           "/org/mpris/MediaPlayer2")
        self.spotify.connect_to_signal("PropertiesChanged",
                                        self.handle_properties_changed)

    def handle_name_owner_changed(self, name, older_owner, new_owner):
        """Introspect the NameOwnerChanged signal to work out if spotify has started."""
        if name == "org.mpris.MediaPlayer2.spotify":
            if new_owner:
                # spotify has been launched - hook it up.
                self.props_changed_listener()
            else:
                self.spotify = None

    def handle_properties_changed(self, interface, changed_props, invalidated_props):
        """Handle track changes."""
        metadata = changed_props.get("Metadata", {})
        if metadata:
            if Notify.init ("spotify-ob-wrapper"):

                title = unicode(metadata.get("xesam:title").encode('utf8'))
                album = unicode(metadata.get("xesam:album").encode('utf8'))
                artist = unicode(metadata.get("xesam:artist")[0].encode('utf8'))
                #print "Title: ", title, "\nAlbum: ", album, "\nArtist: ", artist
                image_url = unicode(metadata.get("mpris:artUrl"))
                hash_ = md5()
                hash_.update("%s-%s" % (artist, album))
                hash_path = hash_.hexdigest()
                image_path = os.path.join(IMAGE_CACHE_DIR, hash_path)
                if not os.path.exists(image_path):
                    try:
                        response, image_contents = self.http.request(image_url)
                        if image_contents:
                            fh = open(image_path, "w")
                            fh.write(image_contents)
                            fh.close()  
                    except:
                        image_path = MISSING

                if image_path != MISSING:
                    alert = Notify.Notification.new(title.replace("&","&amp;"),"by <b>%s</b> from <b>%s</b>" % (artist.replace("&","&amp;"), album.replace("&","&amp;")), image_path)
                    alert.show()


if __name__ == "__main__":
    SpotifyNotifier()
